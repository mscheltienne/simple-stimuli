
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "generated/tutorials/audio/10_base_sounds.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_generated_tutorials_audio_10_base_sounds.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_generated_tutorials_audio_10_base_sounds.py:


===========
Base sounds
===========

``simple-stimuli`` provides a common API across audio stimuli. The audio
stimuli can be either generated or loaded. A generated stimuli can be exported.
The volume, duration and other properties can be set when creating the stimuli
or updated between plays.

.. GENERATED FROM PYTHON SOURCE LINES 13-18

.. code-block:: Python


    from matplotlib import pyplot as plt

    from stimuli.audio import Sound, Tone








.. GENERATED FROM PYTHON SOURCE LINES 19-24

In this tutorial, we will create, edit, save and load a pure tone auditory
stimuli. A pure tone is a signal with a sinusoidal waveform, that is a sine
wave of any frequency, phase-shift and amplitude.

Source: `Wikipedia <https://en.wikipedia.org/wiki/Pure_tone>`_

.. GENERATED FROM PYTHON SOURCE LINES 27-32

Create and edit a pure tone
---------------------------

To create the stimuli, we create a :class:`~stimuli.audio.Tone` object with
a given volume and frequency.

.. GENERATED FROM PYTHON SOURCE LINES 32-35

.. code-block:: Python


    sound = Tone(volume=10, frequency=440)  # La - A440








.. GENERATED FROM PYTHON SOURCE LINES 36-37

We can listen to the sound we created with :meth:`~stimuli.audio.Tone.play`.

.. GENERATED FROM PYTHON SOURCE LINES 37-40

.. code-block:: Python


    sound.play(blocking=True)








.. GENERATED FROM PYTHON SOURCE LINES 41-44

We can edit the sound properties by replacing the value in the attributes.
For instance, let's consider a stereo system and set the volume to ``10`` on
the left channel and to ``30`` on the right channel.

.. GENERATED FROM PYTHON SOURCE LINES 44-47

.. code-block:: Python


    sound.volume = (10, 30)  # 0 to 100








.. GENERATED FROM PYTHON SOURCE LINES 48-49

We can also change the frequency to 1 kHz.

.. GENERATED FROM PYTHON SOURCE LINES 49-52

.. code-block:: Python


    sound.frequency = 1000  # Hz








.. GENERATED FROM PYTHON SOURCE LINES 53-54

The sound is updated each time an attribute is changed.

.. GENERATED FROM PYTHON SOURCE LINES 54-57

.. code-block:: Python


    sound.play(blocking=True)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

The sampling rate can be changed. Typical values are 44.1 kHz and 48 kHz.

.. GENERATED FROM PYTHON SOURCE LINES 59-62

.. code-block:: Python


    sound.sample_rate = 48000  # Hz








.. GENERATED FROM PYTHON SOURCE LINES 63-67

Export/Load a sound
-------------------

We can export a sound with :meth:`~stimuli.audio.Tone.save`.

.. GENERATED FROM PYTHON SOURCE LINES 67-70

.. code-block:: Python


    sound.save("my_pure_tone.wav", overwrite=True)








.. GENERATED FROM PYTHON SOURCE LINES 71-72

We can load a sound with :class:`~stimuli.audio.Sound`.

.. GENERATED FROM PYTHON SOURCE LINES 72-76

.. code-block:: Python


    sound_loaded = Sound("my_pure_tone.wav")
    sound_loaded.play(blocking=True)








.. GENERATED FROM PYTHON SOURCE LINES 77-81

However, a loaded sound can be any type of sound. ``simple-stimuli`` does not
know that the sound was exported with the ``save()`` method of one of its
class. As such, the attributes that were specific to the original sound are
not present anymore and can not be updated anymore.

.. GENERATED FROM PYTHON SOURCE LINES 81-84

.. code-block:: Python


    print(hasattr(sound_loaded, "frequency"))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    False




.. GENERATED FROM PYTHON SOURCE LINES 85-86

Only the basic attributes are preserved: ``duration``, ``sample_rate``.

.. GENERATED FROM PYTHON SOURCE LINES 86-92

.. code-block:: Python


    print(f"Duration of the original sound: {sound.duration} second.")
    print(f"Duration of the loaded sound: {sound_loaded.duration} second.")
    print(f"Sample rate of the original sound: {sound.sample_rate} Hz.")
    print(f"Sample rate of the loaded sound: {sound_loaded.sample_rate} Hz.")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Duration of the original sound: 1 second.
    Duration of the loaded sound: 1.0 second.
    Sample rate of the original sound: 48000 Hz.
    Sample rate of the loaded sound: 48000 Hz.




.. GENERATED FROM PYTHON SOURCE LINES 93-95

The volume is normalized, with the loudest channel set to ``100``. The ratio
between channels is preserved.

.. GENERATED FROM PYTHON SOURCE LINES 95-105

.. code-block:: Python


    print(
        "Volume of the original sound: %s"
        % "({:.1f}, {:.1f})".format(*sound.volume)
    )
    print(
        "Volume of the loaded sound: %s"
        % "({:.1f}, {:.1f})".format(*sound_loaded.volume)
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Volume of the original sound: (10.0, 30.0)
    Volume of the loaded sound: (33.3, 100.0)




.. GENERATED FROM PYTHON SOURCE LINES 106-112

Visualize a sound
-----------------

Finally, the underlying signal is stored in the ``signal`` attribute. The
returned numpy array has 2 dimensions: ``(n_samples, n_channels)``. We can
plot the signal of each channel.

.. GENERATED FROM PYTHON SOURCE LINES 112-133

.. code-block:: Python


    samples_to_plot = 100  # number of samples to plot
    times = sound.times[:samples_to_plot] * 1000  # ms

    f, ax = plt.subplots(2, 1, sharex=True, sharey=True)
    for k in range(2):  # 2 channels
        # draw data
        ax[k].plot(times, sound.signal[:samples_to_plot, k])
        # draw horizontal line through y=0
        ax[k].axhline(0, color="black")

    # labels
    ax[0].set_title("Right channel")
    ax[1].set_title("Left channel")
    ax[1].set_xlabel("Time (ms)")

    # draw vertical line after each period
    period = int(sound.sample_rate / sound.frequency)
    for k in range(0, samples_to_plot, period):
        ax[0].axvline(times[k], color="lightgreen")
        ax[1].axvline(times[k], color="lightgreen")



.. image-sg:: /generated/tutorials/audio/images/sphx_glr_10_base_sounds_001.png
   :alt: Right channel, Left channel
   :srcset: /generated/tutorials/audio/images/sphx_glr_10_base_sounds_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 9.697 seconds)

**Estimated memory usage:**  21 MB


.. _sphx_glr_download_generated_tutorials_audio_10_base_sounds.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 10_base_sounds.ipynb <10_base_sounds.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 10_base_sounds.py <10_base_sounds.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
